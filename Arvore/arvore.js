/**
 * O que √© uma √Årvore em JavaScript? üå≥
Uma √°rvore √© uma estrutura de dados hier√°rquica composta por n√≥s. Cada n√≥ pode ter zero ou mais filhos, e o primeiro n√≥ da √°rvore √© chamado de raiz.

Quando Usar √Årvores?
Quando precisar organizar dados em uma estrutura hier√°rquica, como menus ou arquivos em um sistema.
Para pesquisas r√°pidas, como em √Årvores de Busca Bin√°ria (BST).
Para processamento de express√µes matem√°ticas ou constru√ß√£o de jogos (√Årvores de Decis√£o).
 */


/**
 * Exemplos utilizando uma √Årvore Bin√°ria de Busca (BST) com times de futebol ‚öΩ
 */

// Defini√ß√£o do N√≥ da √Årvore
class Node {
    constructor(value) {
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

// Implementa√ß√£o da √Årvore Bin√°ria de Busca (BST)
class BinarySearchTree {
    constructor() {
        this.root = null;
    }

    insert(value) {
        const newNode = new Node(value);
        if (!this.root) {
            this.root = newNode;
            return;
        }
        let current = this.root;
        while (true) {
            if (value < current.value) {
                if (!current.left) {
                    current.left = newNode;
                    return;
                }
                current = current.left;
            } else {
                if (!current.right) {
                    current.right = newNode;
                    return;
                }
                current = current.right;
            }
        }
    }

    search(value) {
        let current = this.root;
        while (current) {
            if (value === current.value) return true;
            current = value < current.value ? current.left : current.right;
        }
        return false;
    }

    inorderTraversal(node = this.root) {
        if (node) {
            this.inorderTraversal(node.left);
            console.log(node.value);
            this.inorderTraversal(node.right);
        }
    }
}

// Criando a √°rvore e inserindo times de futebol
const bst = new BinarySearchTree();
bst.insert("Flamengo");
bst.insert("Palmeiras");
bst.insert("S√£o Paulo");
bst.insert("Corinthians");
bst.insert("Vasco");

// Exibindo os times em ordem alfab√©tica (inorder traversal)
console.log("Times em ordem alfab√©tica:");
bst.inorderTraversal();

// Buscando por um time espec√≠fico
console.log("O time Flamengo est√° na √°rvore?", bst.search("Flamengo")); // true
console.log("O time Botafogo est√° na √°rvore?", bst.search("Botafogo")); // false
